setwd('~/Documents/gerlinger/')
library(vegan)
sample.key <- read.table("data/sampleid_master_key.txt", header = T, sep = "\t")
getwd()
setwd('~/Documents/gerlinger/')
sample.key <- read.table("data/sampleid_master_key.txt", header = T, sep = "\t")
sample.key.red <- sample.key[grep("05uL", sample.key$master_sampleid, invert = TRUE),]
tax.key <- data.frame(level = c("phylum", "class", "order", "family", "genus"),
label = c("L2" ,"L3", "L4", "L5", "L6"))
files.qiime <- c('data/tax_16S_qiime/otu_table_merged_meta_L2.txt',
'data/tax_16S_qiime/otu_table_merged_meta_L3.txt',
'data/tax_16S_qiime/otu_table_merged_meta_L4.txt',
'data/tax_16S_qiime/otu_table_merged_meta_L5.txt',
'data/tax_16S_qiime/otu_table_merged_meta_L6.txt')
qiime.tax <- lapply(files.qiime, function(x) read.table(x, header=TRUE, sep='\t', row.names=1))
names(qiime.tax) <- c('phylum', 'class', 'order', 'family', 'genus')
qiime.tax <- lapply(seq_along(qiime.tax), function(x){
colnames(qiime.tax[[x]]) <- sample.key$master_sampleid[match(colnames(qiime.tax[[x]]),
sample.key$qiime_sampleid)]
qiime.tax[[x]]})
names(qiime.tax) <- c('phylum', 'class', 'order', 'family', 'genus')
qiime.tax.red <- lapply(seq_along(qiime.tax), function(x){
pick <- colnames(qiime.tax[[x]])[colnames(qiime.tax[[x]]) %in% sample.key.red$master_sampleid]
qiime.tax[[x]][,pick]})
names(qiime.tax.red) <- c('phylum', 'class', 'order', 'family', 'genus')
files.uparse <- c('data/tax_16S_uparse/prop_tables/fiveuL1201_demuxed_tax_normalized_otus_merged_meta_L2.txt',
'data/tax_16S_uparse/prop_tables/fiveuL1201_demuxed_tax_normalized_otus_merged_meta_L3.txt',
'data/tax_16S_uparse/prop_tables/fiveuL1201_demuxed_tax_normalized_otus_merged_meta_L4.txt',
'data/tax_16S_uparse/prop_tables/fiveuL1201_demuxed_tax_normalized_otus_merged_meta_L5.txt',
'data/tax_16S_uparse/prop_tables/fiveuL1201_demuxed_tax_normalized_otus_merged_meta_L6.txt')
uparse.tax <- lapply(files.uparse, function(x) read.table(x, header=TRUE, sep='\t', row.names=1))
names(uparse.tax) <- c('phylum', 'class', 'order', 'family', 'genus')
uparse.tax <- lapply(seq_along(uparse.tax), function(x){
colnames(uparse.tax[[x]]) <- sample.key$master_sampleid[match(colnames(uparse.tax[[x]]),
sample.key$uparse_sampleid)]
uparse.tax[[x]]})
names(uparse.tax) <- c('phylum', 'class', 'order', 'family', 'genus')
uparse.tax.red <- lapply(seq_along(uparse.tax), function(x){
pick <- colnames(uparse.tax[[x]])[colnames(uparse.tax[[x]]) %in% sample.key.red$master_sampleid]
uparse.tax[[x]][,pick]})
names(uparse.tax.red) <- c('phylum', 'class', 'order', 'family', 'genus')
overlap.16S.id <- colnames(uparse.tax.red$phylum)[colnames(uparse.tax.red$phylum) %in% colnames(qiime.tax.red$phylum)]
overlap.16S.tax <- lapply(seq_along(uparse.tax.red), function(x){
rownames(uparse.tax.red[[x]])[rownames(uparse.tax.red[[x]]) %in% rownames(qiime.tax.red[[x]])]})
qiime.compare <- lapply(seq_along(qiime.tax.red), function(x){
dat <- as.data.frame(t(qiime.tax.red[[x]][overlap.16S.tax[[x]], overlap.16S.id]))
dat})
uparse.compare <- lapply(seq_along(uparse.tax.red), function(x){
dat <- as.data.frame(t(uparse.tax.red[[x]][overlap.16S.tax[[x]], overlap.16S.id]))
dat})
qiime.compare.mds <- lapply(qiime.compare, metaMDS)
uparse.compare.mds <- lapply(uparse.compare, metaMDS)
dir.create('results/procrustes_out')
pdf('results/procrustes_out/nmds_uparse_vs_qiime.pdf', width = 8, height = 6, pointsize = 8)
par(mfrow=c(2,3))
lapply(seq_along(qiime.compare.mds), function(x){
plot(procrustes(qiime.compare.mds[[x]], uparse.compare.mds[[x]]),
xlab = 'NMDS1', ylab = 'NMDS2',
ar.col=c('purple','blue','green','orange','red')[x],
main = paste('Procrustes rotation \n(', tax.key$level[x], ' level)', sep=''))})
dev.off()
pdf('results/procrustes_out/nmds_uparse_vs_qiime_monoscale.pdf', width = 8, height = 6, pointsize = 8)
par(mfrow=c(2,3))
lapply(seq_along(qiime.compare.mds), function(x){
plot(procrustes(qiime.compare.mds[[x]], uparse.compare.mds[[x]]),
xlab = 'NMDS1', ylab = 'NMDS2',
ar.col=c('purple','blue','green','orange','red')[x],
xlim = c(-3,1), ylim = c(-2,2),
main = paste('Procrustes rotation \n(', tax.key$level[x], ' level)', sep=''))})
dev.off()
save.image('results/procrustes_out/ger_procrustes.RData')
sample.key <- read.table('data/sampleid_master_key.txt', header = T, sep = '\t')
sample.key.red <- sample.key[grep('05ul', sample.key$master_sampleid, invert = TRUE),]
map <- read.table('data/sourcetracker_16S_uparse/ger_microbialsource_mappingfile_simplified_151013.txt',
header = T, sep = '\t', comment.char = '')
map <- read.table('data/sourcetracker_16S_uparse/ger_sourcetracker_map_151013.txt',
header = T, sep = '\t', comment.char = '')
otu.ger.genus <- read.table('data/tax_16S_uparse/count_tables/gerlinger_uparse_merged_taxonomy_summaries/gerlinger_uparse_merged_L6.txt',
header = T, sep = '\t', row.names = 1, skip = 1, comment.char = '')
otu.hmp.genus <- read.table('data/sourcetracker_16S_uparse/sourcetracker_tutorial_files/hmp_otu_taxonomy_summaries/hmp_otu_table_L6_nospaces.txt',
header = T, sep = '\t', row.names = 1, skip = 1, comment.char = '')
map$X.SampleID[!(map.test$X.SampleID %in% colnames(otu.merge.test))] # show sample names missing from OTU table
length(rownames(otu.ger.genus)[rownames(otu.ger.genus) %in% rownames(otu.hmp.genus)])
length(rownames(otu.hmp.genus)[rownames(otu.hmp.genus) %in% rownames(otu.ger.genus)])
otu.ger.family <- read.table('data/tax_16S_uparse/count_tables/gerlinger_uparse_merged_taxonomy_summaries/gerlinger_uparse_merged_L6.txt',
header = T, sep = '\t', row.names = 1, skip = 1, comment.char = '')
otu.ger.family <- read.table('data/tax_16S_uparse/count_tables/gerlinger_uparse_merged_taxonomy_summaries/gerlinger_uparse_merged_L5.txt',
header = T, sep = '\t', row.names = 1, skip = 1, comment.char = '')
otu.hmp.family <- read.table('data/sourcetracker_16S_uparse/sourcetracker_tutorial_files/hmp_otu_taxonomy_summaries/hmp_otu_table_L5_nospaces.txt',
header = T, sep = '\t', row.names = 1, skip = 1, comment.char = '')
length(rownames(otu.ger.family)[rownames(otu.ger.family) %in% rownames(otu.hmp.family)]) # 285
length(rownames(otu.hmp.family)[rownames(otu.hmp.family) %in% rownames(otu.ger.family)]) #
otu.merge.family <- merge(otu.ger.family, otu.hmp.family, by = 'row.names', all = TRUE)
write.table(otu.merge.family, 'data/sourcetracker_16S_uparse/merged_ger_hmp_L5_manual_nospaces.txt',
sep = '\t', quote = FALSE, row.names = FALSE)
write.table(otu.merge.genus, 'data/sourcetracker_16S_uparse/merged_ger_hmp_L6_manual_nospaces.txt',
sep = '\t', quote = FALSE, row.names = FALSE)
otu.merge.genus <- merge(otu.ger.genus, otu.hmp.genus, by = 'row.names', all = TRUE)
write.table(otu.merge.genus, 'data/sourcetracker_16S_uparse/merged_ger_hmp_L6_manual_nospaces.txt',
sep = '\t', quote = FALSE, row.names = FALSE)
write.table(otu.merge.genus, 'data/sourcetracker_16S_uparse/ger_sourcetracker_merged/merged_ger_hmp_L6_manual_nospaces.txt',
sep = '\t', quote = FALSE, row.names = FALSE)
otu.ger.genus.fil <- read.table('data/tax_16S_uparse/count_tables/gerlinger_uparse_merged_taxonomy_summaries/gerlinger_uparse_merged_L6_filtered_2samples.txt',
otu.ger.genus.fil <- read.table('data/tax_16S_uparse/count_tables/gerlinger_uparse_merged_taxonomy_summaries/gerlinger_uparse_merged_L6_filtered_2samples.txt',
)
)
otu.ger.genus.fil <- read.table('data/tax_16S_uparse/count_tables/gerlinger_uparse_merged_taxonomy_summaries/gerlinger_uparse_merged_L6_filtered_2samples.txt',
header = T, sep = '\t', row.names = 1, skip = 1, comment.char = '')
length(rownames(otu.ger.genus.fil)[rownames(otu.ger.genus.fil) %in% rownames(otu.hmp.genus)]) # 285
length(rownames(otu.hmp.genus)[rownames(otu.hmp.genus) %in% rownames(otu.ger.genus.fil)]) # 285
otu.merge.genus.fil <- merge(otu.ger.genus.fil, otu.hmp.genus, by = 'row.names', all = TRUE)
write.table(otu.merge.genus.fil, 'data/sourcetracker_16S_uparse/ger_sourcetracker_merged/merged_ger_hmp_L6_manual_nospaces_filtered_2samples.txt',
sep = '\t', quote = FALSE, row.names = FALSE)
otu.ger.family <- read.table('data/tax_16S_uparse/count_tables/gerlinger_uparse_merged_taxonomy_summaries/gerlinger_uparse_merged_L5_filtered_2samples.txt',
header = T, sep = '\t', row.names = 1, skip = 1, comment.char = '')
length(rownames(otu.ger.family.fil)[rownames(otu.ger.family.fil) %in% rownames(otu.hmp.family)]) # 125
otu.ger.family <- read.table('data/tax_16S_uparse/count_tables/gerlinger_uparse_merged_taxonomy_summaries/gerlinger_uparse_merged_L5.txt',
header = T, sep = '\t', row.names = 1, skip = 1, comment.char = '')
otu.ger.family.fil <- read.table('data/tax_16S_uparse/count_tables/gerlinger_uparse_merged_taxonomy_summaries/gerlinger_uparse_merged_L5_filtered_2samples.txt',
header = T, sep = '\t', row.names = 1, skip = 1, comment.char = '')
length(rownames(otu.ger.family.fil)[rownames(otu.ger.family.fil) %in% rownames(otu.hmp.family)]) # 125
length(rownames(otu.hmp.family)[rownames(otu.hmp.family) %in% rownames(otu.ger.family.fil)]) # 114
otu.merge.family.fil <- merge(otu.ger.family.fil, otu.hmp.family, by = 'row.names', all = TRUE)
write.table(otu.merge.family.fil, 'data/sourcetracker_16S_uparse/ger_sourcetracker_merged/merged_ger_hmp_L5_manual_nospaces_filtered_2samples.txt',
sep = '\t', quote = FALSE, row.names = FALSE)
View(map)
View(otu.ger.family)
map$X.SampleID[!(map$X.SampleID %in% colnames(otu.ger.genus))]
map$X.SampleID[!(map$X.SampleID %in% colnames(otu.merge.genus))]
length(map$X.SampleID[map$X.SampleID %in% colnames(otu.merge.genus)])
length(map$X.SampleID[map$X.SampleID %in% colnames(otu.ger.genus)])
colnames(otu.ger.genus)[!(colnames(otu.ger.genus) %in% map$X.SampleID)]
View(sample.key.red)
colnames(otu.ger.genus)[!(colnames(otu.ger.genus) %in% map$X.SampleID)] %in% sample.key.red$uparse_sampleid
colnames(otu.ger.family)[!(colnames(otu.ger.family) %in% map$X.SampleID)]
map <- read.table('data/sourcetracker_16S_uparse/ger_sourcetracker_map_151013.txt',
header = T, sep = '\t', comment.char = '')
colnames(otu.ger.family)[!(colnames(otu.ger.family) %in% map$X.SampleID)]
colnames(otu.ger.family)[colnames(otu.ger.family) %in% map$X.SampleID]
grep('oneuL', map$X.SampleID)
map$X.SampleID[grep('oneuL', map$X.SampleID)]
length(map$X.SampleID[grep('oneuL', map$X.SampleID)])
length(map$X.SampleID[grep('oneµL', map$X.SampleID)])
length(map$X.SampleID[grep('one', map$X.SampleID)])
length(map$X.SampleID[grep('oneuL1201', map$X.SampleID)])
length(map$X.SampleID[grep('1201', map$X.SampleID)])
length(map$X.SampleID[grep('oneuL1201', map$X.SampleID)])
View(map)
map <- read.table('data/sourcetracker_16S_uparse/ger_sourcetracker_map_151013.txt',
header = T, sep = '\t', comment.char = '')
View(map)
map <- read.table('data/sourcetracker_16S_uparse/ger_sourcetracker_map_151013.txt',
header = T, sep = '\t', comment.char = '')
colnames(otu.ger.family)[colnames(otu.ger.family) %in% map$X.SampleID]
colnames(otu.ger.family)[!(colnames(otu.ger.family) %in% map$X.SampleID)]
load('results/sourcetracker_out/L5_family/results.RData')
str(results)
fam.res <- load('results/sourcetracker_out/L5_family/results.RData')
load('results/sourcetracker_out/L5_family/results.RData')
fam.res <- results
load('results/sourcetracker_out/L6_genus/results.RData')
gen.res <- results
load('results/sourcetracker_out/L6_genus_noindoor/results.RData')
gen.res.no.in <- results
rm(results)
head(gen.res$proportions)
head(gen.res$proportions_sd)
head(gen.res$draws)
head(gen.res$train.envs)
head(gen.res$full.results)
dim(gen.res$full.results)
map.fam <- read.table('results/sourcetracker_out/L5_family/map.txt',
header = T, sep = '\t', row.names = 1)
View(map.fam)
map.fam <- read.table('results/sourcetracker_out/L5_family/map.txt',
header = T, sep = '\t', row.names = 1, comment.char = '')
View(map.fam)
load('results/sourcetracker_out/L5_family/results.RData')
res.fam <- results
load('results/sourcetracker_out/L6_genus/results.RData')
res.gen <- results
load('results/sourcetracker_out/L6_genus_noindoor/results.RData')
res.gen.noind <- results
rm(results)
map.fam <- read.table('results/sourcetracker_out/L5_family/map.txt',
header = T, sep = '\t', row.names = 1, comment.char = '')
map.gen <- read.table('results/sourcetracker_out/L6_genus/map.txt',
header = T, sep = '\t', row.names = 1, comment.char = '')
map.gen.noind <- read.table('results/sourcetracker_out/L6_genus_noindoor/map.txt',
header = T, sep = '\t', row.names = 1, comment.char = '')
View(map.gen.noind)
colnames(map.gen.noind)
prop.pick <- c('Proportion_Human.Feces', 'Proportion_Human.Mouth', 'Proportion_Human.Skin',
'Proportion_Human.Urine', 'Proportion_Human.Vagina', 'Proportion_Indoor.Air',
'Proportion_Outdoor.Air', 'Proportion_Soil', 'Proportion_Unknown')
prop.pick.noind <- c('Proportion_Human.Feces', 'Proportion_Human.Mouth', 'Proportion_Human.Skin',
'Proportion_Human.Urine', 'Proportion_Human.Vagina', 'Proportion_Outdoor.Air',
'Proportion_Soil', 'Proportion_Unknown')
length(grep('oneuL', rownames(map.gen)))
grep('oneuL', rownames(map.gen))
prop.fam <- map.fam[grep('oneuL', rownames(map.fam)), prop.pick]
prop.gen <- map.gen[grep('oneuL', rownames(map.gen)), prop.pick]
prop.gen.noind <- map.gen.noind[grep('oneuL', rownames(map.gen.noind)), prop.pick.noind]
library(reshape)
install.packages("reshape")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(reshape)
View(prop.gen.noind)
lg.prop.gen.noind <- melt(prop.gen.noind, id.vars = 'Env')
prop.pick <- c('Env', 'Proportion_Human.Feces', 'Proportion_Human.Mouth', 'Proportion_Human.Skin',
'Proportion_Human.Urine', 'Proportion_Human.Vagina', 'Proportion_Indoor.Air',
'Proportion_Outdoor.Air', 'Proportion_Soil', 'Proportion_Unknown')
prop.pick.noind <- c('Env', 'Proportion_Human.Feces', 'Proportion_Human.Mouth', 'Proportion_Human.Skin',
'Proportion_Human.Urine', 'Proportion_Human.Vagina', 'Proportion_Outdoor.Air',
'Proportion_Soil', 'Proportion_Unknown')
prop.fam <- map.fam[grep('oneuL', rownames(map.fam)), prop.pick]
prop.gen <- map.gen[grep('oneuL', rownames(map.gen)), prop.pick]
prop.gen.noind <- map.gen.noind[grep('oneuL', rownames(map.gen.noind)), prop.pick.noind]
lg.prop.gen.noind <- melt(prop.gen.noind, id.vars = 'Env')
View(lg.prop.gen.noind)
lg.prop.gen.noind <- melt(prop.gen.noind, id.vars = c('Env', rownames(prop.gen.noind)))
576/72
lg.prop.gen.noind <- melt(prop.gen.noind, id.vars = c('Env'))
rownames(lg.prop.gen.noind) <- rep(rownames(prop.gen.noind), ncol(prop.gen.noind))
rownames(prop.gen.noind)
ncol(prop.gen.noind)
View(prop.gen.noind)
rownames(lg.prop.gen.noind) <- rep(rownames(prop.gen.noind), ncol(prop.gen.noind)-1)
names(lg.prop.gen.noind) <- rep(rownames(prop.gen.noind), ncol(prop.gen.noind) - 1)
names(lg.prop.gen.noind) <- unlist(rep(rownames(prop.gen.noind), ncol(prop.gen.noind) - 1))
rownames(lg.prop.gen.noind) <- unlist(rep(rownames(prop.gen.noind), ncol(prop.gen.noind) - 1))
prop.fam$SampleID <- rownames(prop.fam)
prop.gen$SampleID <- rownames(prop.gen)
prop.gen.noind$SampleID <- rownames(prop.gen.noind)
lg.prop.gen.noind <- melt(prop.gen.noind, id.vars = c('SampleID', 'Env'))
gg.prop.gen.noind <- ggplot(lg.prop.gen.noind, aes(x = SampleID, y = value, color = variable))
ggg.prop.gen.noind + geom_bar()
gg.prop.gen.noind + geom_bar()
gg.prop.gen.noind + geom_bar(stat = 'identity')
gg.prop.gen.noind <- ggplot(lg.prop.gen.noind, aes(x = Env, y = value, color = variable))
gg.prop.gen.noind + geom_bar(stat = 'identity')
gg.prop.gen.noind <- ggplot(lg.prop.gen.noind, aes(x = SampleID, y = value, color = variable))
gg.prop.gen.noind + geom_bar(stat = 'identity')
gg.prop.gen.noind <- ggplot(lg.prop.gen.noind, aes(x = SampleID, y = value, fill = variable))
gg.prop.gen.noind + geom_bar(stat = 'identity')
library(RColorBrewer)
display.brewer.all()
brewer.pal(5, 'YlOrRd')
gg.prop.gen.noind + geom_bar(stat = 'identity') +
scale_fill_manual(values = c(brewer.pal(5, 'YlOrRd'), brewer.pal(2, 'BrBG'), 'grey50'))
c(brewer.pal(5, 'YlOrRd'), brewer.pal(2, 'BrBG'), 'grey50')
gg.prop.gen.noind + geom_bar(stat = 'identity') +
scale_fill_manual(values = c(brewer.pal(5, 'YlOrRd'), brewer.pal(3, 'BrBG')[1,3], 'grey50'))
gg.prop.gen.noind + geom_bar(stat = 'identity') +
scale_fill_manual(values = c(brewer.pal(5, 'YlOrRd'), brewer.pal(3, 'BrBG')[c(1,3)], 'grey50'))
gg.prop.gen.noind + geom_bar(stat = 'identity') +
scale_fill_manual(values = c(brewer.pal(9, 'YlOrRd')[c(9,8,7,6,5)],
brewer.pal(11, 'BrBG')[c(8,2)],
'grey50'))
gg.prop.gen.noind + geom_bar(stat = 'identity') +
scale_fill_manual(values = c(brewer.pal(9, 'YlOrRd')[c(9,8,7,6,5)],
brewer.pal(11, 'BrBG')[c(8,2)],
'grey80'))
gg.prop.gen.noind + geom_bar(stat = 'identity') +
scale_fill_manual(values = c(brewer.pal(9, 'YlOrRd')[c(8,7,6,5,4)],
brewer.pal(11, 'BrBG')[c(8,2)],
'grey80'))
display.brewer.all(())
display.brewer.all(
)
gg.prop.gen.noind + geom_bar(stat = 'identity') +
scale_fill_manual(values = c(brewer.pal(9, 'YlOrRd')[c(8,7,6,5,4)],
brewer.pal(11, 'Spectral')[c(10,8)],
'grey90'))
gg.prop.gen.noind + geom_bar(position = 'stack') +
scale_fill_manual(values = c(brewer.pal(9, 'YlOrRd')[c(8,7,6,5,4)],
brewer.pal(11, 'Spectral')[c(10,8)],
'grey90'))
gg.prop.gen.noind + geom_bar(stat = 'identity') +
scale_fill_manual(values = c(brewer.pal(9, 'YlOrRd')[c(8,7,6,5,4)],
brewer.pal(11, 'Spectral')[c(10,8)],
'grey90'))
gg.prop.gen.noind + geom_bar(stat = 'identity') +
scale_fill_manual(values = c(brewer.pal(9, 'YlOrRd')[c(8,7,6,5,4)],
brewer.pal(11, 'Spectral')[c(10,8)],
'grey90')) +
theme_bw
gg.prop.gen.noind + geom_bar(stat = 'identity') +
scale_fill_manual(values = c(brewer.pal(9, 'YlOrRd')[c(8,7,6,5,4)],
brewer.pal(11, 'Spectral')[c(10,8)],
'grey90')) +
theme_bw()
gg.prop.gen.noind + geom_bar(stat = 'identity') +
scale_fill_manual(values = c(brewer.pal(9, 'YlOrRd')[c(8,7,6,5,4)],
brewer.pal(11, 'Spectral')[c(10,9)],
'grey90')) +
theme_bw()
gg.prop.gen.noind + geom_bar(stat = 'identity') +
scale_fill_manual(values = c(brewer.pal(9, 'YlOrRd')[c(9,7,5,3,1)],
brewer.pal(11, 'Spectral')[c(10,9)],
'grey90')) +
theme_bw()
gg.prop.gen.noind + geom_bar(stat = 'identity') +
scale_fill_manual(values = c(brewer.pal(9, 'YlOrRd')[c(8,7,5,3,1)],
brewer.pal(11, 'Spectral')[c(10,9)],
'grey90')) +
theme_bw()
gg.prop.gen.noind + geom_bar(stat = 'identity') +
scale_fill_manual(values = c(brewer.pal(9, 'YlOrRd')[c(8,7,5,3,1)],
brewer.pal(11, 'Spectral')[c(10,9)],
'grey90')) +
coord_flip() +
theme_bw()
gg.prop.gen.noind + geom_bar(stat = 'identity') +
scale_fill_manual(values = c(brewer.pal(9, 'YlOrRd')[c(8,7,5,3,1)],
brewer.pal(11, 'Spectral')[c(10,9)],
'grey90'),
labels = c('Human Feces', 'Human Mouth', 'Human Skin',
'Human Urine', 'Human Vagina', 'Outdoor Air',
'Soil', 'Unknown')) +
coord_flip() +
theme_bw()
gg.prop.gen.noind + geom_bar(stat = 'identity') +
scale_fill_manual(values = c(brewer.pal(9, 'YlOrRd')[c(8,7,5,3,1)],
brewer.pal(11, 'Spectral')[c(10,9)],
'grey90'),
labels = c('Human Feces', 'Human Mouth', 'Human Skin',
'Human Urine', 'Human Vagina', 'Outdoor Air',
'Soil', 'Unknown'),
name = 'Putative Source') +
coord_flip() +
theme_bw()
ggsave('figures/ger_sourcetracker_genus_noindoor.png', width = 8, height = 10)
display.brewer.all()
lg.prop.gen <- melt(prop.gen, id.vars = c('SampleID', 'Env'))
lg.prop.gen <- melt(prop.gen, id.vars = c('SampleID', 'Env'))
gg.prop.gen <- ggplot(lg.prop.gen, aes(x = SampleID, y = value, fill = variable))
gg.prop.gen + geom_bar(stat = 'identity') +
scale_fill_manual(values = c(brewer.pal(9, 'YlOrRd')[c(8,7,5,3,1)],
brewer.pal(11, 'Spectral')[c(11,10,9)],
'grey90'),
labels = c('Human Feces', 'Human Mouth', 'Human Skin',
'Human Urine', 'Human Vagina', 'Indoor Air',
'Outdoor Air', 'Soil', 'Unknown'),
name = 'Putative Source') +
coord_flip() +
theme_bw()
sample.ignore <- c('oneuL3031', 'oneuLP1', 'oneuLFT6', 'oneuLP2', 'oneuLC1')
rownames(map.fam)[grep('oneuL', rownames(map.fam))]
sample.all <- rownames(map.fam)[grep('oneuL', rownames(map.fam))]
sample.pick <- sample.all[!(sample.all %in% sample.ignore)]
prop.fam <- map.fam[sample.pick, prop.pick]
prop.fam$SampleID <- rownames(prop.fam)
prop.gen <- map.gen[sample.pick, prop.pick]
prop.gen$SampleID <- rownames(prop.gen)
prop.gen.noind <- map.gen.noind[sample.pick, prop.pick.noind]
prop.gen.noind$SampleID <- rownames(prop.gen.noind)
lg.prop.gen <- melt(prop.gen, id.vars = c('SampleID', 'Env'))
gg.prop.gen <- ggplot(lg.prop.gen, aes(x = SampleID, y = value, fill = variable))
gg.prop.gen + geom_bar(stat = 'identity') +
scale_fill_manual(values = c(brewer.pal(9, 'YlOrRd')[c(8,7,5,3,1)],
brewer.pal(11, 'Spectral')[c(11,10,9)],
'grey90'),
labels = c('Human Feces', 'Human Mouth', 'Human Skin',
'Human Urine', 'Human Vagina', 'Indoor Air',
'Outdoor Air', 'Soil', 'Unknown'),
name = 'Putative Source') +
coord_flip() +
theme_bw()
View(prop.gen)
rowSums(prop.gen[,-1])
rowSums(as.numeric(prop.gen[,-1]))
rowSums(as.numeric(prop.gen[,!1]))
rowSums(as.numeric(prop.gen[,!c(1,11)]))
rowSums(prop.gen[,2:10])
rowSums(prop.gen.noind[,2:10])
rowSums(prop.gen.noind[,2:9])
lg.prop.gen <- melt(prop.gen, id.vars = c('SampleID', 'Env'))
gg.prop.gen <- ggplot(lg.prop.gen, aes(x = SampleID, y = value, fill = variable))
gg.prop.gen + geom_bar(stat = 'identity') +
scale_fill_manual(values = c(brewer.pal(9, 'YlOrRd')[c(8,7,5,3,1)],
brewer.pal(11, 'Spectral')[c(11,10,9)],
'grey90'),
labels = c('Human Feces', 'Human Mouth', 'Human Skin',
'Human Urine', 'Human Vagina', 'Indoor Air',
'Outdoor Air', 'Soil', 'Unknown'),
name = 'Putative Source') +
coord_flip() +
theme_bw()
ggsave('figures/ger_sourcetracker_genus.png', width = 8, height = 10)
lg.prop.gen.noind <- melt(prop.gen.noind, id.vars = c('SampleID', 'Env'))
gg.prop.gen.noind <- ggplot(lg.prop.gen.noind, aes(x = SampleID, y = value, fill = variable))
gg.prop.gen.noind + geom_bar(stat = 'identity') +
scale_fill_manual(values = c(brewer.pal(9, 'YlOrRd')[c(8,7,5,3,1)],
brewer.pal(11, 'Spectral')[c(10,9)],
'grey90'),
labels = c('Human Feces', 'Human Mouth', 'Human Skin',
'Human Urine', 'Human Vagina', 'Outdoor Air',
'Soil', 'Unknown'),
name = 'Putative Source') +
coord_flip() +
theme_bw()
ggsave('figures/ger_sourcetracker_genus_noindoor.png', width = 8, height = 10)
lg.prop.fam <- melt(prop.fam, id.vars = c('SampleID', 'Env'))
gg.prop.fam <- ggplot(lg.prop.fam, aes(x = SampleID, y = value, fill = variable))
gg.prop.fam + geom_bar(stat = 'identity') +
scale_fill_manual(values = c(brewer.pal(9, 'YlOrRd')[c(8,7,5,3,1)],
brewer.pal(11, 'Spectral')[c(11,10,9)],
'grey90'),
labels = c('Human Feces', 'Human Mouth', 'Human Skin',
'Human Urine', 'Human Vagina', 'Indoor Air',
'Outdoor Air', 'Soil', 'Unknown'),
name = 'Putative Source') +
coord_flip() +
theme_bw()
ggsave('figures/ger_sourcetracker_family.png', width = 8, height = 10)
load('results/sourcetracker_out/L5_family_noindoor/results.RData')
setwd('~/Documents/gerlinger/')
load('results/sourcetracker_out/L5_family_noindoor/results.RData')
